package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	graph "github.com/sheelendar196/go-projects/graphql-project/graph/generated"
	"github.com/sheelendar196/go-projects/graphql-project/graph/model"
)

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	employee := &model.Employee{
		Name:       input.Name,
		EmpID:      *input.Email,
		Address:    input.Address,
		IsActive:   input.IsActive,
		ManagerID:  input.ManagerID,
		Mobile:     input.Mobile,
		Department: input.Department,
		Email:      input.Email,
	}
	//r.Resolver.list = append(r.Resolver.list, employee)
	return employee, nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*model.Employee, error) {
	return nil, nil
}

// GetEmployeeList is the resolver for the getEmployeeList field.
func (r *queryResolver) GetEmployeeList(ctx context.Context) ([]*model.Employee, error) {
	return nil, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
